{"version":3,"sources":["components/Navbar.js","components/NationalCards.js","components/StateCard.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","AppBar","position","Container","Toolbar","Typography","variant","NationalCards","data","Grid","container","justify","spacing","map","card","item","xs","sm","Card","CardContent","CircularProgress","cards","title","positive","positiveIncrease","death","deathIncrease","color","gutterBottom","component","Number","toLocaleString","StateCard","App","useState","nationalStats","setNationalStats","stateStats","setStateStats","stateInfo","setStateInfo","search","setSearch","useEffect","getNationalStats","getStateStats","getStateInfo","a","fetch","response","json","className","Box","textAlign","my","mt","mb","TextField","label","fullWidth","value","onChange","e","target","filter","state","name","toLowerCase","includes","filteredState","md","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68a2e87c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Container, Toolbar, Typography } from '@material-ui/core';\r\n\r\nconst Navbar = () => {\r\n    return(\r\n        <AppBar position='static'>\r\n            <Container>\r\n                <Toolbar>\r\n                    <Typography variant='h6'>\r\n                        COVID-19 Tracker\r\n                    </Typography>\r\n                </Toolbar>\r\n            </Container>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid, CircularProgress } from '@material-ui/core';\r\n\r\nconst NationalCards = ({ data }) => {\r\n    if (typeof (data) == 'undefined') {\r\n        return (\r\n            <Grid container justify='center' spacing={3}>\r\n                {[0, 1, 2].map(card => (\r\n                    <Grid item xs={6} sm={3}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <CircularProgress />\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        );\r\n    }\r\n    const cards = [\r\n        {\r\n            title: 'Total Cases',\r\n            data: data.positive,\r\n        },\r\n        {\r\n            title: 'New Cases',\r\n            data: data.positiveIncrease,\r\n        },\r\n        {\r\n            title: 'Total Deaths',\r\n            data: data.death,\r\n        },\r\n        {\r\n            title: 'New Deaths',\r\n            data: data.deathIncrease\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Grid container justify='center' spacing={3}>\r\n            {cards.map(card => (\r\n                <Grid item xs={6} sm={3}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Typography color='textSecondary' gutterBottom>\r\n                                {card.title}\r\n                            </Typography>\r\n                            <Typography variant='h5' component='h2'>\r\n                                {Number(card.data).toLocaleString()}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default NationalCards;","import React from 'react';\r\nimport { Card, CardContent, Typography, CircularProgress } from '@material-ui/core';\r\n\r\nconst StateCard = ({ title, data }) => {\r\n    if (typeof (data) == 'undefined') {\r\n        return (\r\n            <Card>\r\n                <CardContent>\r\n                    <CircularProgress />\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Typography variant='h5' component='h2' gutterBottom>\r\n                    {title}\r\n                </Typography>\r\n                <Typography color='textSecondary'>\r\n                    Total Cases: {Number(data.positive).toLocaleString()}\r\n                </Typography>\r\n                <Typography color='textSecondary'>\r\n                    New Cases: {Number(data.positiveIncrease).toLocaleString()}\r\n                </Typography>\r\n                <Typography color='textSecondary'>\r\n                    Total Deaths: {Number(data.death).toLocaleString()}\r\n                </Typography>\r\n                <Typography color='textSecondary'>\r\n                    New Deaths: {Number(data.deathIncrease).toLocaleString()}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default StateCard;","import React, { useState, useEffect } from 'react';\r\nimport Navbar from './components/Navbar';\r\nimport { Grid, Container, Typography, Box, TextField } from '@material-ui/core';\r\nimport NationalCards from './components/NationalCards';\r\nimport StateCard from './components/StateCard';\r\n\r\nfunction App() {\r\n  const [nationalStats, setNationalStats] = useState([]);\r\n  const [stateStats, setStateStats] = useState([]);\r\n  const [stateInfo, setStateInfo] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n\r\n  useEffect(() => {\r\n    getNationalStats();\r\n    getStateStats();\r\n    getStateInfo();\r\n  }, []);\r\n\r\n  const getNationalStats = async () => {\r\n    const response = await fetch(`https://api.covidtracking.com/v1/us/current.json`);\r\n    const data = await response.json();\r\n    setNationalStats(data[0]);\r\n  }\r\n\r\n  const getStateStats = async () => {\r\n    const response = await fetch(`https://api.covidtracking.com/v1/states/current.json`)\r\n    const data = await response.json();\r\n    setStateStats(data);\r\n  }\r\n\r\n  const getStateInfo = async () => {\r\n    const response = await fetch(`https://api.covidtracking.com/v1/states/info.json`)\r\n    const data = await response.json();\r\n    setStateInfo(data);\r\n  }\r\n\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar />\r\n      <Container>\r\n        <Typography variant='h2'>\r\n          <Box textAlign='center' my={4}>\r\n            National Data\r\n          </Box>\r\n        </Typography>\r\n        <NationalCards data={nationalStats} />\r\n        <Typography variant='h2'>\r\n          <Box textAlign='center' mt={4} mb={2}>\r\n            States and Territories\r\n          </Box>\r\n        </Typography>\r\n        <Box textAlign='center' my={4}>\r\n          <TextField label='Search' variant='outlined' fullWidth={true} value={search} onChange={updateSearch}/>\r\n        </Box>\r\n        <Grid container justify='center' spacing={3}>\r\n          {stateInfo.filter(state => state.name.toLowerCase().includes(search.toLowerCase())).map(filteredState => (\r\n            <Grid item xs={6} md={3}>\r\n              <StateCard title={filteredState.name} data={stateStats[stateInfo.indexOf(filteredState)]} />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}